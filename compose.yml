services:
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    ports:
      - "${DB_LOCAL_PORT}:${DB_CONTAINER_PORT}"
    # volumes:
    #   - db-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER}", "-p${DB_PASSWORD}"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}
  test-db:
    build:
      context: ./db
      dockerfile: Dockerfile
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    ports:
      - "3307:${DB_CONTAINER_PORT}"
    # volumes:
    #   - db-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER}", "-p${DB_PASSWORD}"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "${BACKEND_LOCAL_PORT}:${BACKEND_CONTAINER_PORT}"
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - .gitignore
            - .git/**
            - .env
            - __pycache__/**
            - .pytest_cache/**
        - action: rebuild
          path: ./backend/.venv
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    # environment:
    #   - DATABASE_URL=${DATABASE_URL}
    # volumes:
      # - ./backend/app:/app/app
      # - ./backend/migrations:/app/migrations
      # - ./backend/app/logs:/app/app/logs
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_CONTAINER_PORT}/"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}


networks:
  app-network:
    driver: bridge

volumes:
  db-data:
    name: db-data
